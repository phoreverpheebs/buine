# >>>>>>>>>>>>>>>>>>>>>> ELF FILE HEADER <<<<<<<<<<<<<<<<<<<<<<

7f 45 4c 46             # 00 e_ident[EI_MAG]: ELF magic number
02                      # 04 e_ident[EI_CLASS]: 2 = 64-bit
   01                   # 05 e_ident[EI_DATA]: 1 = little-endian
      01                # 06 e_ident[EI_VERSION]: ELF header version (1)
         00             # 07 e_ident[EI_OSABI]: target OS ABI; 0 = ELFOSABI_NONE
00                      # 08 e_ident[EI_ABIVERSION]: ABI version
   00 00 00 00 00 00 00 # 09 e_ident[EI_PAD]: reserved padding bytes

02 00                   # 10 e_type: object file type: 2 = ET_EXEC
      3e 00             # 12 e_machine: instruction set architecture: 3 = x86

01 00 00 00             # 14 e_version: ELF identification version (1)

80 00 40 00 00 00 00 00 # 18 e_entry: entry point address

40 00 00 00 00 00 00 00 # 20 e_phoff: program header offset
00 00 00 00 00 00 00 00 # 28 e_shoff: section header offset

00 00 00 00             # 30 e_flags: 0 for x86

40 00                   # 34 e_ehsize: ELF header size

38 00                   # 36 e_phentsize: program header entry size
      01 00             # 38 e_phnum: program header amount
40 00                   # 3a e_shentsize: section header entry size
      00 00             # 3c e_shnum: section header amount

00 00                   # 3e e_shstrndx: index of .shstrtab section

# >>>>>>>>>>>>>>>>>>>>>> PROGRAM HEADER <<<<<<<<<<<<<<<<<<<<<<

01 00 00 00             # 40 p_type: segment type; PT_LOAD
            07 00 00 00 # 44 p_flags: 'rwx'
80 00 00 00 00 00 00 00 # 48 p_offset: file image offset
80 00 40 00 00 00 00 00 # 50 p_vaddr: virtual address
80 00 40 00 00 00 00 00 # 58 p_paddr: physical address
c5 00 00 00 00 00 00 00 # 60 p_filesz: size in file image
80 08 50 00 00 00 00 00 # 68 p_memsz: size in memory
00 01 00 00 00 00 00 00 # 70 p_align: segment alignment: 128 bytes

00 00 00 00 00 00 00 00 # 78

# >>>>>>>>>>>>>>>>>>>>>> PROGRAM SEGMENT <<<<<<<<<<<<<<<<<<<<<<

## use these two buffers for string operations
# dst (edi): 0x400400

fc                      # 80 cld
bf 00 04 40 00          # 81 mov edi, 0x00400400
be 36 01 40 00          # 86 mov esi, src
## address

40 b5 0f                # 8b mov bpl, 15
e8 5d 00 00 00          # 8e call make_title
## address

b0 0a                   # 93 mov al, '\n'
aa                      # 95 stosb

be a7 00 40 00          # 96 mov esi, 0x004000a7
## address
b9 04 00 00 00          # 9b mov ecx, 4
e8 1a 00 00 00          # a0 call dec2hex
## address

eb 04                   # a5 jmp +0x4
75 45 4c 46             # a7 ELF magic number

b0 0a                   # ab mov al, '\n'
aa                      # ad stosb

83 ea 3e                # ae sub edx, 0x3e
## subtract amount of bytes printed + 2
e8 71 00 00 00          # b1 call print_edi

## exit ##
b8 01 00 00 00          # b6 mov eax, 1
31 db                   # bb xor ebx, ebx
cd 80                   # bd int 0x80 

## TODO
## '00 e_ident[EI_MAG]: ELF magic number'

## dec2hex ## 
## reads ecx bytes from esi converts 
## to hex and writes it to edi (with spaces)
## increments edx for every byte written

31 c0                   # bf xor eax, eax

bd e0 00 40 00          # c1 mov ebp, 0x004000e0
## address

ac                      # c6 lodsb

8b d8                   # c7 mov ebx, eax

c0 e8 04                # c9 shr al, 4
8a 04 28                # cc mov al, [eax+ebp]

aa                      # cf stosb

80 e3 0f                # d0 and bl, 0x0f
8a 04 2b                # d3 mov al, [ebx+ebp]

aa                      # d6 stosb

b0 20                   # d7 mov al, ' '
aa                      # d9 stosb

83 c2 03                # da add edx, 3
e2 e7                   # dd loop

c3                      # df ret

## hex_table in middle of 
## code bc why not lol
30 31 32 33 34 35 36 37 # e0 '01234567'
38 39 61 62 63 64 65 66 # e8 '89abcdef'

## make_title ## 
## (ebp=size, esi=title)
31 d2                   # f0 xor edx, edx
b2 2f                   # f2 mov dl, 46
01 ea                   # f4 add edx, ebp

e8 20 00 00 00          # f6 call add_comment

b0 3e                   # fb mov al, '>'
b9 16 00 00 00          # fd mov ecx, 22
f3 aa                   # 102 rep stos

b0 20                   # 104 mov al, ' '

aa                      # 106 stosb
87 e9                   # 107 xchg ecx, ebp
f3 a4                   # 109 rep movs
aa                      # 10b stosb

b0 3c                   # 10c mov al, '<'
b1 16                   # 10e mov cl, 22
f3 aa                   # 110 rep stos

b0 0a                   # 112 mov al, '\n'
aa                      # 114 stosb

e8 0d 00 00 00          # 115 call print_edi

c3                      # 11a ret

## add_comment ##
## adds '# ' to [edi] 
## increments edx by 2
66 b8 23 20             # 11b mov ax, '# '
66 ab                   # 11f stosw
31 c0                   # 121 xor eax, eax
80 c2 02                # 123 add edx, 2
c3                      # 126 ret

## print_edi ##
29 d7                   # 127 sub edi, edx
31 c0                   # 129 xor eax, eax
b0 04                   # 12b mov al, 4
31 db                   # 12d xor ebx, ebx
b3 01                   # 12f mov bl, 1
89 f9                   # 131 mov ecx, edi
cd 80                   # 133 int 0x80
c3                      # 135 ret

# src                   # 136
45 4c 46 20 
46 49 4c 45 
20 48 45 41 
44 45 52
                        # 145

# >>>>>>>>>>>>>>>>>>>>>> ELF END <<<<<<<<<<<<<<<<<<<<<<
