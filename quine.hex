# >>>>>>>>>>>>>>>>>>>>>> ELF FILE HEADER <<<<<<<<<<<<<<<<<<<<<<

7f 45 4c 46             # 00 e_ident[EI_MAG]: ELF magic number
02                      # 04 e_ident[EI_CLASS]: 2 = 64-bit
   01                   # 05 e_ident[EI_DATA]: 1 = little-endian
      01                # 06 e_ident[EI_VERSION]: ELF header version (1)
         00             # 07 e_ident[EI_OSABI]: target OS ABI; 0 = ELFOSABI_NONE
00                      # 08 e_ident[EI_ABIVERSION]: ABI version
   00 00 00 00 00 00 00 # 09 e_ident[EI_PAD]: reserved padding bytes

02 00                   # 10 e_type: object file type: 2 = ET_EXEC
      3e 00             # 12 e_machine: instruction set architecture: 3 = x86

01 00 00 00             # 14 e_version: ELF identification version (1)

80 00 40 00 00 00 00 00 # 18 e_entry: entry point address

40 00 00 00 00 00 00 00 # 20 e_phoff: program header offset
00 00 00 00 00 00 00 00 # 28 e_shoff: section header offset

00 00 00 00             # 30 e_flags: 0 for x86

40 00                   # 34 e_ehsize: ELF header size

38 00                   # 36 e_phentsize: program header entry size
      01 00             # 38 e_phnum: program header amount
40 00                   # 3a e_shentsize: section header entry size
      00 00             # 3c e_shnum: section header amount

00 00                   # 3e e_shstrndx: index of .shstrtab section

# >>>>>>>>>>>>>>>>>>>>>> PROGRAM HEADER <<<<<<<<<<<<<<<<<<<<<<

01 00 00 00             # 40 p_type: segment type; PT_LOAD
            07 00 00 00 # 44 p_flags: 'rwx'
80 00 00 00 00 00 00 00 # 48 p_offset: file image offset
80 00 40 00 00 00 00 00 # 50 p_vaddr: virtual address
80 00 40 00 00 00 00 00 # 58 p_paddr: physical address
4c 00 00 00 00 00 00 00 # 60 p_filesz: size in file image
80 08 50 00 00 00 00 00 # 68 p_memsz: size in memory
00 01 00 00 00 00 00 00 # 70 p_align: segment alignment: 128 bytes

00 00 00 00 00 00 00 00 # 78

# >>>>>>>>>>>>>>>>>>>>>> PROGRAM SEGMENT <<<<<<<<<<<<<<<<<<<<<<

# buffer: 0x400100

fc                      # 80 cld

e8 2d 00 00 00          # 81 call +0x32
b0 3e                   # 86 mov al, 0x3e
b9 16 00 00 00          # 88 mov ecx, 22
bf 00 01 40 00          # 8d mov edi, 0x400100
f3 aa                   # 92 rep stos

b8 04 00 00 00          # 94 mov eax, 4
bb 01 00 00 00          # 99 mov ebx, 1
b9 00 01 40 00          # 9e mov ecx, 0x400100
ba 16 00 00 00          # a3 mov edx, 1
cd 80                   # a8 int 0x80

b8 01 00 00 00          # aa mov eax, 0x1
31 db                   # af xor ebx, ebx
cd 80                   # b1 int 0x80 

# start_comment         # b3
b8 04 00 00 00          # b3 mov eax, 4
bb 01 00 00 00          # b8 mov ebx, 1
b9 ca 00 40 00          # bd mov ecx, [#]
ba 02 00 00 00          # c2 mov edx, 2
cd 80                   # c7 int 0x80
c3                      # c9 ret

# constants             # ca
23 20

# >>>>>>>>>>>>>>>>>>>>>> ELF END <<<<<<<<<<<<<<<<<<<<<<
