# >>>>>>>>>>>>>>>>>>>>>> ELF FILE HEADER <<<<<<<<<<<<<<<<<<<<<<

7f 45 4c 46             # 00 e_ident[EI_MAG]: ELF magic number
02                      # 04 e_ident[EI_CLASS]: 2 = 64-bit
   01                   # 05 e_ident[EI_DATA]: 1 = little-endian
      01                # 06 e_ident[EI_VERSION]: ELF header version (1)
         00             # 07 e_ident[EI_OSABI]: target OS ABI; 0 = ELFOSABI_NONE
00                      # 08 e_ident[EI_ABIVERSION]: ABI version
   00 00 00 00 00 00 00 # 09 e_ident[EI_PAD]: reserved padding bytes

02 00                   # 10 e_type: object file type: 2 = ET_EXEC
      3e 00             # 12 e_machine: instruction set architecture: 3 = x86

01 00 00 00             # 14 e_version: ELF identification version (1)

80 00 40 00 00 00 00 00 # 18 e_entry: entry point address

40 00 00 00 00 00 00 00 # 20 e_phoff: program header offset
00 00 00 00 00 00 00 00 # 28 e_shoff: section header offset

00 00 00 00             # 30 e_flags: 0 for x86

40 00                   # 34 e_ehsize: ELF header size

38 00                   # 36 e_phentsize: program header entry size
      01 00             # 38 e_phnum: program header amount
40 00                   # 3a e_shentsize: section header entry size
      00 00             # 3c e_shnum: section header amount

00 00                   # 3e e_shstrndx: index of .shstrtab section

# >>>>>>>>>>>>>>>>>>>>>> PROGRAM HEADER <<<<<<<<<<<<<<<<<<<<<<

01 00 00 00             # 40 p_type: segment type; PT_LOAD
            07 00 00 00 # 44 p_flags: 'rwx'
80 00 00 00 00 00 00 00 # 48 p_offset: file image offset
80 00 40 00 00 00 00 00 # 50 p_vaddr: virtual address
80 00 40 00 00 00 00 00 # 58 p_paddr: physical address
bb 00 00 00 00 00 00 00 # 60 p_filesz: size in file image
80 08 50 00 00 00 00 00 # 68 p_memsz: size in memory
00 01 00 00 00 00 00 00 # 70 p_align: segment alignment: 128 bytes

00 00 00 00 00 00 00 00 # 78

# >>>>>>>>>>>>>>>>>>>>>> PROGRAM SEGMENT <<<<<<<<<<<<<<<<<<<<<<

## use these two buffers for string operations
# dst (edi): 0x400400

fc                      # 80 cld
bf 00 04 40 00          # 81 mov edi, 0x00400400
be 2c 01 40 00          # 86 mov esi, src
## address

40 b5 0f                # 8b mov bpl, 15
e8 4e 00 00 00          # 8e call make_title
## address

b0 0a                   # 93 mov al, '\n'
aa                      # 95 stosb

be a7 00 40 00          # 96 mov esi, 0x004000a4
## address
b9 04 00 00 00          # 9b mov ecx, 4
e8 0f 00 00 00          # a0 call dec2hex
## address

eb 04                   # a5 jmp +0x4
## address

75 45 4c 46             # a7 ELF magic number

## exit ##
b8 01 00 00 00          # ab mov eax, 1
31 db                   # b0 xor ebx, ebx
cd 80                   # b2 int 0x80 

## TODO
## '00 e_ident[EI_MAG]: ELF magic number'

## dec2hex ## 
## reads ecx bytes from esi converts 
## to hex and writes it to edi (with spaces)

31 d2                   # b4 xor edx, edx

ac                      # b6 lodsb

88 c2                   # b7 mov dl, al
c0 ea 04                # b9 shr dl, 4
83 e0 0f                # bc and eax, 0x0f

## hex_table address
bd ce 00 40 00          # bf mov ebp, 0x004000ce

## maybe swap bh and bl if reversed 4-bit orders
8a 04 28                # c4 mov al, [eax+ebp]
8a 24 2a                # c7 mov ah, [edx+ebp]

ab                      # ca stosw

b0 20                   # cb mov al, ' '
aa                      # cd stosb

e2 e4                   # ce loop -28
c3                      # d0 ret

## hex_table in middle of code bc why not lol
30 31 32 33 34 35 36 37 # d1 '01234567'
38 39 61 62 63 64 65 66 # d9 '89abcdef'

## make_title ## 
## (rbp=size, esi=title)
e8 2d 00 00 00          # e1 call start_comment

## edx is amount of bytes to be written to output from dst
ba 2f 00 00 00          # e6 mov edx, 46
01 ea                   # eb add edx, ebp

b0 3e                   # ed mov al, '>'
b9 16 00 00 00          # ef mov ecx, 22
f3 aa                   # f4 rep stos

b0 20                   # f6 mov al, ' '

aa                      # f8 stosb
87 e9                   # f9 xchg ecx, ebp
f3 a4                   # fb rep movs
aa                      # fd stosb

b0 3c                   # fe mov al, '<'
b1 16                   # 100 mov cl, 22
f3 aa                   # 102 rep stos

b0 0a                   # 104 mov al, '\n'
aa                      # 106 stosb

b0 04                   # 107 mov al, 4
b9 00 04 40 00          # 109 mov ecx, 0x400400
cd 80                   # 10e int 0x80

## restore dst buffer
01 d7                   # 110 sub edi, edx

c3                      # 112 ret

## start_comment ##
b8 04 00 00 00          # 113 mov eax, 4
bb 01 00 00 00          # 118 mov ebx, 1
b9 2a 01 40 00          # 11d mov ecx, [#]
## address
ba 02 00 00 00          # 122 mov edx, 2
cd 80                   # 127 int 0x80
c3                      # 129 ret

# constants
23 20                   # 12a '# '

# src                   # 12c
45 4c 46 20 
46 49 4c 45 
20 48 45 41 
44 45 52
                        # 13b

# >>>>>>>>>>>>>>>>>>>>>> ELF END <<<<<<<<<<<<<<<<<<<<<<
